{"version":3,"file":"static/js/385.60619311.chunk.js","mappings":"iKAuHA,QArHA,WAEI,OAAOA,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,OAAO,IAAIC,SAAA,EAGnCC,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,SAAS,OACvBC,KAAM,uCAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,SAAS,OACvBC,KAAM,8BAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,SAAS,SACvBC,KAAM,qeAgBVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,SAAS,OACvBC,KAAM,6BAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,SAAS,aACvBC,KAAM,iJAQVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,yBAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,aACxBC,KAAM,gEAKVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,oCAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,oHAIVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,yHAIVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,8BAGVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,SACxBC,KAAM,4LAQVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,SACxBC,KAAM,0FAMVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,SACxBC,KAAM,sMASVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,oHAIVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,yHAIVJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,SAAS,OACxBC,KAAM,2HAOV,C,sMCjFA,QAhBA,SAAgBC,GAA0B,IAAzB,KAACH,EAAI,KAAEE,EAAI,SAAED,GAASE,EAMnC,OAJAC,EAAAA,EAAAA,YAAU,KACNC,IAAAA,cAAoB,GACtB,KAEKX,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,KACRZ,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,GAAI,CAACd,OAAO,GAAGC,SAAA,EAC9CC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACD,GAAI,CAAEE,QAAQ,UAAWhB,OAAQ,GAAIC,SAAEG,KAC/CF,EAAAA,EAAAA,KAAA,OAAKH,MAAO,CAACkB,MAAM,OAAOhB,UAACC,EAAAA,EAAAA,KAAA,QAAMgB,UAAW,YAAYb,IAAWJ,SAAEK,WAIjF,C","sources":["courses/bsca/Lab5.jsx","courses/bsca/Snippet.jsx"],"sourcesContent":["import Snippet from './Snippet';\n\nfunction Lab5() {\n\n    return(<div style={{margin:50}}>\n\n\n<Snippet step=\"2\" language=\"bash\"\n    code={`cd /opt/splunk/etc/apps/buttercup`}\n/>\n\n<Snippet step=\"3\" language=\"bash\"\n    code={`nano bin/bcgEndpoints.py`}\n/>\n\n<Snippet step=\"4\" language=\"python\"\n    code={`from splunk.persistconn.application import PersistentServerConnectionApplication\nimport json\n\nclass Echo(PersistentServerConnectionApplication):\n    def __init__(self, _command_line, _command_arg):\n        super(PersistentServerConnectionApplication, self).__init__()\n\n    def handle(self, in_bytes):\n        request = json.loads(in_bytes)    \n        payload = json.dumps(request)\n        return {\n            'payload': payload,\n            'status': 200\n        }`}\n/>\n\n<Snippet step=\"8\" language=\"bash\"\n    code={`nano local/restmap.conf`}\n/>\n\n<Snippet step=\"9\" language=\"properties\"\n    code={`[script:bcg_echo]\nmatch = /bcg/echo\nscript = bcgEndpoints.py\nscripttype = persist\nhandler = bcgEndpoints.Echo\npython.version = python3`}\n/>\n\n<Snippet step=\"13\" language=\"bash\"\n    code={`nano local/web.conf`}\n/>\n\n<Snippet step=\"14\" language=\"properties\"\n    code={`[expose:bcg_echo]\nmethods = GET,POST\npattern = /bcg/echo`}\n/>\n\n<Snippet step=\"16\" language=\"bash\"\n    code={`/opt/splunk/bin/splunk restart`}\n/>\n\n<Snippet step=\"17\" language=\"bash\"\n    code={`curl -k -X GET -u {splunk-id}:{password} \\\\\n--url \"https://localhost:8089/services/bcg/echo?myGetArg=myvalue\"`}\n/>\n\n<Snippet step=\"19\" language=\"bash\"\n    code={`curl -k -X POST -u {splunk-id}:{password} \\\\\n--url https://localhost:8089/services/bcg/echo -d \"myPostArg=myvalue\"`}\n/>\n\n<Snippet step=\"21\" language=\"bash\"\n    code={`nano bin/bcgEndpoints.py`}\n/>\n\n<Snippet step=\"22\" language=\"python\"\n    code={`\n        method = request['method'].lower()\n        if method == \"post\":\n            data = request['form']\n        elif method == \"get\":\n            data = request['query']`}\n/>\n\n<Snippet step=\"23\" language=\"python\"\n    code={`\n        payload = {}\n        for key,val in data:\n            payload[key] = val`}\n/>\n\n<Snippet step=\"24\" language=\"python\"\n    code={`\n        #payload = json.dumps(request)\n        return {\n            'payload': payload,\n            'status': 200,\n            'headers': { 'Content-Type':'application/json' }\n        }`}\n/>\n\n<Snippet step=\"26\" language=\"bash\"\n    code={`curl -k -X GET -u {splunk-id}:{password} \\\\\n--url \"https://localhost:8089/services/bcg/echo?myGetArg=myvalue\"`}\n/>\n\n<Snippet step=\"28\" language=\"bash\"\n    code={`curl -k -X POST -u {splunk-id}:{password} \\\\\n--url https://localhost:8089/services/bcg/echo -d \"myPostArg=myvalue\"`}\n/>\n\n<Snippet step=\"30\" language=\"bash\"\n    code={`curl -k -X GET -u {splunk-id}:{password} \\\\\n--url https://localhost:8089/services/bcg/echo -d \"myGetArg=myvalue\" -i`}\n/>\n\n\n    </div>);\n\n}\n\nexport default Lab5;\n","import React, { useEffect } from \"react\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\n\n// https://prismjs.com/#languages-list\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';               // Python\nimport 'prismjs/components/prism-bash';                 // CLI\nimport 'prismjs/components/prism-javascript';           // JavaScript\nimport 'prismjs/components/prism-json';                 // JSON\nimport 'prismjs/components/prism-jsx';                  // React\nimport 'prismjs/components/prism-makefile';             // plain text\nimport 'prismjs/components/prism-properties';           // .conf files\nimport 'prismjs/components/prism-splunk-spl';           // SPL\nimport 'prismjs/components/prism-uri';                  // URLs\nimport '../../prism.css';\n\nfunction Snippet({step, code, language}) {\n\n    useEffect(() => {\n        Prism.highlightAll();\n    },[]);\n\n    return(<div>\n        <Divider/>\n        <Stack direction=\"row\" spacing={5} sx={{margin:3}}>\n            <Avatar sx={{ bgcolor:'#f56a00', margin: 2 }}>{step}</Avatar>\n            <pre style={{width:'80%'}}><code className={`language-${language}`}>{code}</code></pre>\n        </Stack>\n    </div>);\n\n}\n\nexport default Snippet;\n"],"names":["_jsxs","style","margin","children","_jsx","Snippet","step","language","code","_ref","useEffect","Prism","Divider","Stack","direction","spacing","sx","Avatar","bgcolor","width","className"],"sourceRoot":""}