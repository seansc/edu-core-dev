{"version":3,"file":"static/js/100.a79a74fa.chunk.js","mappings":"oKA0EA,QAxEA,WAuDI,OAAOA,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,OAAO,IAAIC,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KApDZ,8BAoDyBC,SAAS,mBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KAlDZ,yBAkDyBC,SAAS,kBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KAjDZ,kGAiDyBC,SAAS,mBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA9CZ,yBA8C0BC,SAAS,kBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA7CZ,mLA6C0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA1CZ,2MA0C0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAnCZ,yRAmC0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA5BZ,yDA4B0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAzBZ,kBAyB0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAxBZ,0CAwB0BC,SAAS,kBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAvBZ,mJAuB0BC,SAAS,yBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KApBZ,+HAoB0BC,SAAS,0BAGlD,C,wLCtCA,QAhBA,SAAgBC,GAA0B,IAAzB,KAACH,EAAI,KAAEC,EAAI,SAAEC,GAASC,EAMnC,OAJAC,EAAAA,EAAAA,YAAU,KACNC,IAAAA,cAAoB,GACtB,KAEKX,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,KACRZ,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,GAAI,CAACd,OAAO,GAAGC,SAAA,EAC9CC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACD,GAAI,CAAEE,QAAQ,UAAWhB,OAAQ,GAAIC,SAAEG,KAC/CF,EAAAA,EAAAA,KAAA,OAAKH,MAAO,CAACkB,MAAM,OAAOhB,UAACC,EAAAA,EAAAA,KAAA,QAAMgB,UAAWZ,EAASL,SAAEI,WAInE,C","sources":["courses/usra/Lab2.jsx","courses/usra/Snippet.jsx"],"sourcesContent":["import Snippet from './Snippet';\n\nfunction Lab2() {\n\n\n\nconst step3 = `cd ~/labs/lab2\nnano get.sh`;\n\nconst step4 = `/services/data/indexes`;\n\nconst step9 = `\\\\\n| xmlstarlet sel -N a=\"http://www.w3.org/2005/Atom\" -t \\\\\n-m /a:feed/a:entry -v a:title -n`;\n\nconst step14 = `/services/data/indexes`;\n\nconst step19 = `#print(response.content)\nprint(\"Request: [\" + response.request.method + \"] \" + response.request.url)\nprint(\"Response: [\" + str(response.status_code) + \"] \" + response.reason)`;\n\nconst step20 = `# XML / Atom namespaces\n# '' = atom, s = splunk\nns = {\n    '': 'http://www.w3.org/2005/Atom',\n    's': 'http://dev.splunk.com/ns/rest',\n    'opensearch': 'http://a9.com/-/spec/opensearch/1.1/'\n}`;\n\nconst step21 = `if (response.status_code == 200):\n    # get xml root element\n    root = ET.fromstring(response.text)\n    # for all entries in the atom namespace\n    for entry in root.findall('entry', ns):\n        # print the entry title\n        print(\" \" + entry.find('title', ns).text)`;\n\nconst step26 = `\\\\\n--data-urlencode \"output_mode=json\" \\\\\n| jq '.'`;\n\nconst step32 = `'.entry[].name'`;\n\nconst step37 = `/services/data/indexes?output_mode=json`;\n\nconst step42 = `//console.log(data);\nconsole.log(\"Request: [GET] \" + response.url);\nconsole.log(\"Response: [\" + response.status + \"] \" + response.statusText);`;\n\nconst step43 = `if (response.status === 200) {\n    data.entry.forEach(function(entry) {\n        console.log(\" \" + entry.name);\n    });\n}`;\n\n\n\n    return(<div style={{margin:50}}>\n        <Snippet step=\"3\" code={step3} language=\"language-bash\"/>\n        <Snippet step=\"4\" code={step4} language=\"language-uri\"/>\n        <Snippet step=\"9\" code={step9} language=\"language-bash\"/>\n        <Snippet step=\"14\" code={step14} language=\"language-uri\"/>\n        <Snippet step=\"19\" code={step19} language=\"language-python\"/>\n        <Snippet step=\"20\" code={step20} language=\"language-python\"/>\n        <Snippet step=\"21\" code={step21} language=\"language-python\"/>\n        <Snippet step=\"26\" code={step26} language=\"language-bash\"/>\n        <Snippet step=\"32\" code={step32} language=\"language-bash\"/>\n        <Snippet step=\"37\" code={step37} language=\"language-uri\"/>\n        <Snippet step=\"42\" code={step42} language=\"language-javascript\"/>\n        <Snippet step=\"43\" code={step43} language=\"language-javascript\"/>\n    </div>);\n\n}\n\nexport default Lab2;\n","import React, { useEffect } from \"react\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';               // Python\nimport 'prismjs/components/prism-bash';                 // CLI\nimport 'prismjs/components/prism-javascript';           // JavaScript\nimport 'prismjs/components/prism-makefile';             // plain text\nimport 'prismjs/components/prism-properties';           // .conf files\nimport 'prismjs/components/prism-splunk-spl';           // SPL\nimport 'prismjs/components/prism-uri';                  // URLs\nimport '../../prism.css';\n\n//import Gist from 'react-embed-gist';\n\nfunction Snippet({step, code, language}) {\n\n    useEffect(() => {\n        Prism.highlightAll();\n    },[]);\n\n    return(<div>\n        <Divider/>\n        <Stack direction=\"row\" spacing={5} sx={{margin:3}}>\n            <Avatar sx={{ bgcolor:'#f56a00', margin: 2 }}>{step}</Avatar>\n            <pre style={{width:'80%'}}><code className={language}>{code}</code></pre>\n        </Stack>\n    </div>);\n\n}\n\nexport default Snippet;\n"],"names":["_jsxs","style","margin","children","_jsx","Snippet","step","code","language","_ref","useEffect","Prism","Divider","Stack","direction","spacing","sx","Avatar","bgcolor","width","className"],"sourceRoot":""}