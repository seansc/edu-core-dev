"use strict";(self.webpackChunkedu_core_dev=self.webpackChunkedu_core_dev||[]).push([[46,751],{1751:(e,n,a)=>{a.r(n),a.d(n,{default:()=>l});var t=a(1046),s=a(579);const l=function(){return(0,s.jsxs)("div",{style:{margin:50},children:[(0,s.jsx)(t.default,{step:"10",code:"import React, { useState } from 'react';\n\nconst TabSearch = () => {\n    return (<div style={{ margin: 25 }}>\n        TAB SEARCH\n    </div>);\n};\n\nexport default TabSearch;",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"13",code:"import TabSearch from './TabSearch';",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"14",code:"<TabSearch/>",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"16",code:"cd ~/code/packages/my-react-component\nyarn add @splunk/react-search\nyarn add @splunk/dashboard-utils",language:"language-bash"}),(0,s.jsx)(t.default,{step:"18",code:"import SearchBar from '@splunk/react-search/components/Bar';\nimport searchBNF from \"@splunk/dashboard-utils/defaultSPLSyntax.json\";",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"20",code:'    const [options, setOptions] = useState({\n        "earliest": "-7d@d",\n        "latest": "now",\n        "search": "",\n        "syntax": searchBNF\n    });',language:"language-jsx"}),(0,s.jsx)(t.default,{step:"22",code:"const handleOptionsChange = (option) => {\n    console.log(option);\n    setOptions({...options, ...option});\n};\n\nconst handleEventTrigger = (eventType) => {\n    console.log(eventType);\n};",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"23",code:"    <SearchBar\n        options={options}\n        onOptionsChange={handleOptionsChange}\n        onEventTrigger={handleEventTrigger}\n    />",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"26",code:"cd ~/code/packages/my-react-component\nyarn add @splunk/search-job",language:"language-bash"}),(0,s.jsx)(t.default,{step:"28",code:"import SearchJob from '@splunk/search-job';\nimport * as config from '@splunk/splunk-utils/config';",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"31",code:"    const job = SearchJob.create(options, {\n        app: config.app,\n        owner: config.username\n    });",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"34",code:'    const progress = job.getProgress().subscribe({\n        next: searchState => {\n            console.log(searchState);\n        },\n        error: err => {\n            console.log(err);\n        },\n        complete: () => {\n            console.log("search complete!");\n        }\n    });',language:"language-jsx"}),(0,s.jsx)(t.default,{step:"37",code:'    const results = job.getResults().subscribe({\n        next: response => {\n            console.log(response);\n        },\n        error: err => {\n            console.log(err);\n        },\n        complete: () => {\n            console.log("results retrieved!");\n        }\n    });',language:"language-jsx"}),(0,s.jsx)(t.default,{step:"41",code:"index=bcg_sales sourcetype=sales:web",language:"language-splunk-spl"}),(0,s.jsx)(t.default,{step:"45",code:'const [fields, setFields] = useState([]);\nconst [events, setEvents] = useState([]);\nconst [status, setStatus] = useState("");\nconst [duration, setDuration] = useState("");',language:"language-jsx"}),(0,s.jsx)(t.default,{step:"47",code:"        setStatus(searchState.content.dispatchState);\n        setDuration(searchState.content.runDuration);",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"49",code:"        setFields(response.fields);\n        setEvents(response.results);",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"52",code:"import JSONTree from '@splunk/react-ui/JSONTree';\nimport StaticContent from '@splunk/react-ui/StaticContent';",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"54",code:"    <StaticContent>Status: {status} {duration}</StaticContent>\n    <StaticContent>Fields</StaticContent>\n    <JSONTree json={fields} expandChildrenOnShiftKey />\n    <StaticContent>Events</StaticContent>\n    <JSONTree json={events} expandChildrenOnShiftKey />",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"57",code:"import Table from '@splunk/react-ui/Table';",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"59",code:"    <Table>\n        <Table.Head>\n            {fields.map((field,i) => (\n                <Table.HeadCell key={'f'+i}>{field.name}</Table.HeadCell>\n            ))}\n        </Table.Head>\n        <Table.Body>\n            {events.map((event,i) => (\n                <Table.Row key={'r'+i}>\n                    {fields.map((field,ii) => (\n                        <Table.Cell key={'c'+ii}>{event[field.name]}</Table.Cell>\n                    ))}   \n                </Table.Row>\n            ))}\n        </Table.Body>\n    </Table>",language:"language-jsx"}),(0,s.jsx)(t.default,{step:"62",code:'        let filtered = response.fields.filter(f => !f.name.startsWith("_"));\n        filtered.push({"name": "_raw"});\n\n        setFields(filtered);',language:"language-jsx"})]})}},1046:(e,n,a)=>{a.r(n),a.d(n,{default:()=>g});var t=a(5043),s=a(1045),l=a(9336),o=a(683),r=a(2999),u=a.n(r),c=(a(3817),a(6149),a(3636),a(337),a(3994),a(3839),a(4194),a(8496),a(7337),a(4608),a(579));const g=function(e){let{step:n,code:a,language:r}=e;return(0,t.useEffect)((()=>{u().highlightAll()}),[]),(0,c.jsxs)("div",{children:[(0,c.jsx)(l.A,{}),(0,c.jsxs)(o.A,{direction:"row",spacing:5,sx:{margin:3},children:[(0,c.jsx)(s.A,{sx:{bgcolor:"#f56a00",margin:2},children:n}),(0,c.jsx)("pre",{style:{width:"80%"},children:(0,c.jsx)("code",{className:r,children:a})})]})]})}},4608:()=>{}}]);
//# sourceMappingURL=751.510f8f64.chunk.js.map