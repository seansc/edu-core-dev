{"version":3,"file":"static/js/385.866ea1c9.chunk.js","mappings":"iKAuGA,QArGA,WA+EI,OAAOA,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,OAAO,IAAIC,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KA5EZ,oCA4EyBC,SAAS,mBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KA3EZ,2BA2EyBC,SAAS,mBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KA1EZ,keA0EyBC,SAAS,qBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KA5DZ,0BA4DyBC,SAAS,mBACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,IAAIC,KA3DZ,8IA2DyBC,SAAS,4BACxCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KArDZ,sBAqD0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KApDZ,6DAoD0BC,SAAS,4BAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAjDZ,iCAiD0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAhDZ,6GAgD0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA9CZ,kHA8C0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA5CZ,2BA4C0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA3CZ,yLA2C0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KArCZ,uFAqC0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAjCZ,mMAiC0BC,SAAS,qBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KA1BZ,6GA0B0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAxBZ,kHAwB0BC,SAAS,mBAC1CJ,EAAAA,EAAAA,KAACC,EAAAA,QAAO,CAACC,KAAK,KAAKC,KAtBZ,mHAsB0BC,SAAS,oBAGlD,C,uJCvEA,QAhBA,SAAgBC,GAA0B,IAAzB,KAACH,EAAI,KAAEC,EAAI,SAAEC,GAASC,EAMnC,OAJAC,EAAAA,EAAAA,YAAU,KACNC,IAAAA,cAAoB,GACtB,KAEKX,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,KACRZ,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,GAAI,CAACd,OAAO,GAAGC,SAAA,EAC9CC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACD,GAAI,CAAEE,QAAQ,UAAWhB,OAAQ,GAAIC,SAAEG,KAC/CF,EAAAA,EAAAA,KAAA,OAAKH,MAAO,CAACkB,MAAM,OAAOhB,UAACC,EAAAA,EAAAA,KAAA,QAAMgB,UAAWZ,EAASL,SAAEI,WAInE,C","sources":["courses/bsca/Lab5.jsx","courses/bsca/Snippet.jsx"],"sourcesContent":["import Snippet from './Snippet';\n\nfunction Lab5() {\n\n\n\nconst step2 = `cd /opt/splunk/etc/apps/buttercup`;\n\nconst step3 = `nano bin/bcgEndpoints.py`;\n\nconst step4 = `from splunk.persistconn.application import PersistentServerConnectionApplication\nimport json\n\nclass Echo(PersistentServerConnectionApplication):\n    def __init__(self, _command_line, _command_arg):\n        super(PersistentServerConnectionApplication, self).__init__()\n\n    def handle(self, in_bytes):\n        request = json.loads(in_bytes)    \n        payload = json.dumps(request)\n        return {\n            'payload': payload,\n            'status': 200\n        }`;\n\nconst step8 = `nano local/restmap.conf`;\n\nconst step9 = `[script:bcg_echo]\nmatch = /bcg/echo\nscript = bcgEndpoints.py\nscripttype = persist\nhandler = bcgEndpoints.Echo\npython.version = python3`;\n\nconst step13 = `nano local/web.conf`;\n\nconst step14 = `[expose:bcg_echo]\nmethods = GET,POST\npattern = /bcg/echo`;\n\nconst step16 = `/opt/splunk/bin/splunk restart`;\n\nconst step17 = `curl -k -X GET -u {splunk-id}:{password} \\\n--url \"https://localhost:8089/services/bcg/echo?myGetArg=myvalue\"`;\n\nconst step19 = `curl -k -X POST -u {splunk-id}:{password} \\\n--url https://localhost:8089/services/bcg/echo -d \"myPostArg=myvalue\"`;\n\nconst step21 = `nano bin/bcgEndpoints.py`;\n\nconst step22 = `\n        method = request['method'].lower()\n        if method == \"post\":\n            data = request['form']\n        elif method == \"get\":\n            data = request['query']`;\n\nconst step23 = `\n        payload = {}\n        for key,val in data:\n            payload[key] = val`;\n\nconst step24 = `\n        #payload = json.dumps(request)\n        return {\n            'payload': payload,\n            'status': 200,\n            'headers': { 'Content-Type':'application/json' }\n        }`;\n\nconst step26 = `curl -k -X GET -u {splunk-id}:{password} \\\n--url \"https://localhost:8089/services/bcg/echo?myGetArg=myvalue\"`;\n\nconst step28 = `curl -k -X POST -u {splunk-id}:{password} \\\n--url https://localhost:8089/services/bcg/echo -d \"myPostArg=myvalue\"`;\n\nconst step30 = `curl -k -X GET -u {splunk-id}:{password} \\\n--url https://localhost:8089/services/bcg/echo -d \"myGetArg=myvalue\" -i`;\n\n\n\n    return(<div style={{margin:50}}>\n        <Snippet step=\"2\" code={step2} language=\"language-bash\"/>\n        <Snippet step=\"3\" code={step3} language=\"language-bash\"/>\n        <Snippet step=\"4\" code={step4} language=\"language-python\"/>\n        <Snippet step=\"8\" code={step8} language=\"language-bash\"/>\n        <Snippet step=\"9\" code={step9} language=\"language-solution-file\"/>\n        <Snippet step=\"13\" code={step13} language=\"language-bash\"/>\n        <Snippet step=\"14\" code={step14} language=\"language-solution-file\"/>\n        <Snippet step=\"16\" code={step16} language=\"language-bash\"/>\n        <Snippet step=\"17\" code={step17} language=\"language-bash\"/>\n        <Snippet step=\"19\" code={step19} language=\"language-bash\"/>\n        <Snippet step=\"21\" code={step21} language=\"language-bash\"/>\n        <Snippet step=\"22\" code={step22} language=\"language-python\"/>\n        <Snippet step=\"23\" code={step23} language=\"language-python\"/>\n        <Snippet step=\"24\" code={step24} language=\"language-python\"/>\n        <Snippet step=\"26\" code={step26} language=\"language-bash\"/>\n        <Snippet step=\"28\" code={step28} language=\"language-bash\"/>\n        <Snippet step=\"30\" code={step30} language=\"language-bash\"/>\n    </div>);\n\n}\n\nexport default Lab5;\n","import React, { useEffect } from \"react\";\n\nimport Avatar from '@mui/material/Avatar';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-solution-file';\nimport '../../prism.css';\n\n//import Gist from 'react-embed-gist';\n\nfunction Snippet({step, code, language}) {\n\n    useEffect(() => {\n        Prism.highlightAll();\n    },[]);\n\n    return(<div>\n        <Divider/>\n        <Stack direction=\"row\" spacing={5} sx={{margin:3}}>\n            <Avatar sx={{ bgcolor:'#f56a00', margin: 2 }}>{step}</Avatar>\n            <pre style={{width:'80%'}}><code className={language}>{code}</code></pre>\n        </Stack>\n    </div>);\n\n}\n\nexport default Snippet;\n"],"names":["_jsxs","style","margin","children","_jsx","Snippet","step","code","language","_ref","useEffect","Prism","Divider","Stack","direction","spacing","sx","Avatar","bgcolor","width","className"],"sourceRoot":""}